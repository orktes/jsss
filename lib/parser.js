/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,23],$V2=[1,11],$V3=[1,19],$V4=[1,18],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,13,19,20,32,33,68,79,80],$V9=[2,107],$Va=[1,28],$Vb=[19,31],$Vc=[19,31,68],$Vd=[2,53],$Ve=[1,36],$Vf=[1,37],$Vg=[1,13,17,18,19,20,25,26,28,30,31,32,33,34,35,36,40,41,43,47,49,51,53,58,59,60,61,62,63,64,65,67,68,69,70,71,72,76,79,80],$Vh=[1,40],$Vi=[1,41],$Vj=[1,49],$Vk=[19,25,34],$Vl=[19,25,34,68],$Vm=[17,18],$Vn=[17,19,28,43,68],$Vo=[19,31,35,36,40,41,58,59,60,61,62,63,64,65,67,72,76],$Vp=[25,34],$Vq=[1,73],$Vr=[17,18,68],$Vs=[1,13,19,20,32,33,79,80],$Vt=[1,99],$Vu=[1,97],$Vv=[1,98],$Vw=[1,100],$Vx=[1,94],$Vy=[1,95],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,103],$VI=[1,101],$VJ=[1,104],$VK=[25,34,68],$VL=[1,112],$VM=[17,19,25,28,31,34,35,36,40,41,43,53,58,59,60,61,62,63,64,65,67,68,72,76],$VN=[17,19,25,28,31,34,35,36,40,41,43,53,58,59,60,61,62,63,64,65,67,72,76],$VO=[2,36],$VP=[1,132],$VQ=[1,152],$VR=[1,147],$VS=[1,140],$VT=[1,151],$VU=[1,139],$VV=[2,75],$VW=[1,150],$VX=[1,145],$VY=[1,154],$VZ=[1,143],$V_=[1,156],$V$=[1,149],$V01=[1,153],$V11=[1,146],$V21=[1,138],$V31=[1,144],$V41=[1,148],$V51=[1,155],$V61=[17,18,19,25,26,28,30,31,34,35,40,41,49,51,58,68,69,70,71],$V71=[17,18,19,25,26,28,30,31,34,35,40,41,49,51,58,69,70,71];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"source_elements":4,"source_element":5,"import_item":6,"variable_item":7,"rule_item":8,"macro_item":9,"function_item":10,"import":11,"space_cdata_list":12,"IMPORT_SYM":13,"wempty":14,"string_or_uri":15,"import_name":16,";":17,"AS":18,"IDENT":19,"VAR_DEFINE_SYM":20,"declaration":21,"function_def":22,"function_def_name":23,"function_def_attrs":24,")":25,"{":26,"code_block":27,"}":28,"macro_def":29,"(":30,"FUNCTION":31,"FUNC_DEFINE_SYM":32,"MACRO_DEFINE_SYM":33,",":34,"STRING":35,"URI":36,"rule_map":37,"ruleset":38,"unary_operator":39,"-":40,"+":41,"property":42,"*":43,"rule_base":44,"declaration_list":45,"parent":46,"EXTENDS":47,"combinator":48,">":49,"declaration_parts":50,":":51,"expr":52,"IMPORTANT_SYM":53,"term":54,"computable_term":55,"inline_code":56,"string_term":57,"NUMBER":58,"PERCENTAGE":59,"LENGTH":60,"EMS":61,"EXS":62,"ANGLE":63,"TIME":64,"FREQ":65,"code_sym":66,"CODE":67,"S":68,"RANDOM_CONTENT":69,"<":70,"=":71,"UNICODERANGE":72,"hexcolor":73,"operator":74,"/":75,"HASH":76,"whitespace":77,"space_cdata":78,"CDO":79,"CDC":80,"$accept":0,"$end":1},
terminals_: {2:"error",13:"IMPORT_SYM",17:";",18:"AS",19:"IDENT",20:"VAR_DEFINE_SYM",25:")",26:"{",28:"}",30:"(",31:"FUNCTION",32:"FUNC_DEFINE_SYM",33:"MACRO_DEFINE_SYM",34:",",35:"STRING",36:"URI",40:"-",41:"+",43:"*",47:"EXTENDS",49:">",51:":",53:"IMPORTANT_SYM",58:"NUMBER",59:"PERCENTAGE",60:"LENGTH",61:"EMS",62:"EXS",63:"ANGLE",64:"TIME",65:"FREQ",67:"CODE",68:"S",69:"RANDOM_CONTENT",70:"<",71:"=",72:"UNICODERANGE",75:"/",76:"HASH",79:"CDO",80:"CDC"},
productions_: [0,[3,1],[4,1],[4,2],[4,0],[5,1],[5,1],[5,1],[5,1],[5,1],[6,1],[6,1],[11,6],[16,4],[16,1],[7,4],[7,1],[10,11],[10,1],[9,11],[9,1],[23,3],[23,1],[22,1],[29,1],[24,1],[24,1],[24,5],[15,2],[15,2],[37,1],[37,2],[37,0],[8,1],[8,1],[39,1],[39,1],[42,2],[42,3],[38,5],[44,3],[46,1],[46,4],[48,2],[48,2],[48,0],[45,1],[45,2],[50,1],[50,1],[50,1],[21,5],[21,6],[21,0],[52,1],[52,4],[52,2],[54,1],[54,2],[54,1],[54,1],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[56,4],[56,2],[56,3],[56,4],[66,1],[27,1],[27,0],[27,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[57,2],[57,2],[57,2],[57,2],[57,1],[74,2],[74,2],[74,2],[74,0],[73,2],[77,1],[77,2],[14,1],[14,0],[12,1],[12,2],[12,0],[78,1],[78,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    var map = {};
    _.each($$[$0], function (item) {
      var type = item[0];
      item = item[1];

      switch (type) {
        case "rule":
          map.rules = map.rules || {};
          map.rules[item[0]] = item[1];
        break;
        case "variable":
          map.variables = map.variables || {};
          map.variables[item[0]] = item[1];
        break;
        case "function":
          map.functions = map.functions || {};
          map.functions[item[0]] = item[1];
        break;
        case "macro":
          map.macros = map.macros || {};
          map.macros[item[0]] = item[1];
        break;
        case "import":
          map.imports = map.imports || [];
          map.imports.push(item);
        break;
      }

    });
    return map;
  
break;
case 2:

    this.$ = [];
    if ( $$[$0] !== null && $$[$0][1])
      this.$.push ( $$[$0] );
  
break;
case 3:

    this.$ = $$[$0-1];
    if ( $$[$0] !== null && $$[$0][1])
      this.$.push ( $$[$0] );
  
break;
case 4: case 11: case 14: case 16: case 18: case 20: case 32: case 34: case 49: case 50: case 53: case 108: case 109: case 111: case 112: case 113:
this.$ = null;
break;
case 5:
this.$ = ["import", $$[$0]];;
break;
case 6:
this.$ = ["variable", $$[$0]];;
break;
case 7:
this.$ = ["rule", $$[$0]];;
break;
case 8:
this.$ = ["macro", $$[$0]];;
break;
case 9:
this.$ = ["function", $$[$0]];
break;
case 10: case 33: case 35: case 36: case 48: case 57: case 59: case 74: case 75: case 77: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 106:
this.$ = $$[$0];
break;
case 12:

      this.$ = {
        file: JSON.parse($$[$0-3]),
        line: yylineno,
        name: $$[$0-2]
      };
    
break;
case 13: case 15: case 28: case 29: case 43: case 44: case 94: case 99: case 100: case 101: case 103:
this.$ = $$[$0-1];
break;
case 17:

    this.$ = [
      $$[$0-8],
      {
        type: "FUNC_DEF",
        attributes: $$[$0-6],
        value: $$[$0-1],
        line: $$[$0-10][1]
      }
    ];
  
break;
case 19:

    this.$ = [
      $$[$0-8],
      {
        type: "MACRO_DEF",
        attributes: $$[$0-6],
        value: $$[$0-1],
        line: $$[$0-10][1]
      }
    ];
  
break;
case 21:
this.$ = $$[$0-2];
break;
case 22:
this.$ = $$[$0].substring(0, $$[$0].length - 1);
break;
case 23: case 24:
this.$ = [$$[$0], yylineno];
break;
case 25: case 41:
this.$ = [];
break;
case 26: case 54:

    this.$ = [];
    if ( $$[$0] !== null )
      this.$.push ( $$[$0] );
  
break;
case 27:

    this.$ = $$[$0-4];
    if ( $$[$0] !== null )
      this.$.push ( $$[$0] );
  
break;
case 30:

      this.$ = {};
      if ( $$[$0] !== null )
        this.$[$$[$0][0]] = $$[$0][1];
    
break;
case 31:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null )
        this.$[$$[$0][0]] = $$[$0][1];
    
break;
case 37:

    this.$ = $$[$0-1].replace(/[-_]([a-zA-Z])/g, function (g) { return g[1].toUpperCase(); });
  
break;
case 38:
this.$ = $$[$0-2] + $$[$0-1]      /* cwdoh; */;
break;
case 39:
this.$ = [$$[$0-4][0], { "type": "style", "selector": $$[$0-4][0], "parents": $$[$0-4][1], "declarations": $$[$0-2], "line": $$[$0-4][2] }];
break;
case 40:
this.$ = [$$[$0-2], $$[$0], yylineno];
break;
case 42:
this.$ = [$$[$0-1]];
break;
case 45: case 102: case 107:
this.$ = "";
break;
case 46:

      this.$ = {};
      if ( $$[$0] !== null ) {
        this.$[$$[$0][0]] = $$[$0][1];
      }
    
break;
case 47:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null ) {
        this.$[$$[$0][0]] = $$[$0][1];
      }
    
break;
case 51:
this.$ = [ $$[$0-4], $$[$0-1][0] ];
break;
case 52:

    this.$ = [ $$[$0-5], $$[$0-2][0] ];
    $$[$0-2][0].important = true;
  
break;
case 55:

    this.$ = $$[$0-3];
    this.$.push( $$[$0] );
  
break;
case 56:

    this.$ = $$[$0-1];
    this.$.push( $$[$0] );
  
break;
case 58:

    this.$ = $$[$0]
    this.$.unary_operator = $$[$0-1]
  
break;
case 60:
this.$ = {type: "STRING", value: $$[$0], line: yylineno};
break;
case 61:
this.$ = {type: "NUMBER", value: $$[$0-1], line: yylineno};
break;
case 62:
this.$ = {type: "PERCENTAGE", value: $$[$0-1], line: yylineno};
break;
case 63:
this.$ = {type: "LENGTH", value: $$[$0-1], line: yylineno};
break;
case 64:
this.$ = {type: "EMS", value: $$[$0-1], line: yylineno};
break;
case 65:
this.$ = {type: "EXS", value: $$[$0-1], line: yylineno};
break;
case 66:
this.$ = {type: "ANGLE", value: $$[$0-1], line: yylineno};
break;
case 67:
this.$ = {type: "TIME", value: $$[$0-1], line: yylineno};
break;
case 68:
this.$ = {type: "FREQ", value: $$[$0-1], line: yylineno};
break;
case 69:
this.$ = {type: "CODE", value: $$[$0-1], line: $$[$0-3]};
break;
case 70:
this.$ = {type: "CODE", value: $$[$0], line: $$[$0-1]};
break;
case 71:
this.$ = {type: "FUNC", name: $$[$0-2].substring(0, $$[$0-2].length - 1), attributes: [], line: yylineno};
break;
case 72:
this.$ = {type: "FUNC", name: $$[$0-3].substring(0, $$[$0-3].length - 1), attributes: $$[$0-1], line: yylineno};
break;
case 73:
this.$ = yylineno;
break;
case 76:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 78: case 79:
this.$ = $$[$0] + " ";
break;
case 93:
this.$ = $$[$0-1] + $$[$0];
break;
case 95: case 96: case 97:
this.$ = '"' + $$[$0-1] + '"';;
break;
case 98:
this.$ = '"' + $$[$0] + '"';;
break;
case 104: case 105:
this.$ = ' ';
break;
}
},
table: [{1:[2,4],3:1,4:2,5:3,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,19:$V1,20:$V2,22:14,29:13,32:$V3,33:$V4,38:12,44:17,68:$V5,78:16,79:$V6,80:$V7},{1:[3]},{1:[2,1],5:24,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,19:$V1,20:$V2,22:14,29:13,32:$V3,33:$V4,38:12,44:17,68:$V5,78:16,79:$V6,80:$V7},o($V8,[2,2]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o([1,13,19,20,32,33],[2,11],{78:25,68:$V5,79:$V6,80:$V7}),o([17,19,43],$V9,{14:26,77:27,68:$Va}),o($V8,[2,33]),o($Vb,$V9,{77:27,14:29,68:$Va}),o($Vb,$V9,{77:27,14:30,68:$Va}),o([35,36],$V9,{77:27,14:31,68:$Va}),o($V8,[2,108]),{26:[1,32]},o($Vc,[2,24]),o($Vc,[2,23]),o($V8,[2,111]),o($V8,[2,112]),o($V8,[2,113]),o([26,47],$V9,{77:27,14:33,68:$Va}),o($V8,[2,3]),o($V8,[2,109]),{17:$Vd,19:$Ve,21:34,42:35,43:$Vf},o([1,13,17,18,19,20,25,26,28,30,31,32,33,34,35,36,40,41,43,47,49,51,53,58,59,60,61,62,63,64,65,67,69,70,71,72,76,79,80],[2,106],{68:[1,38]}),o($Vg,[2,104]),{19:$Vh,23:39,31:$Vi},{19:$Vh,23:42,31:$Vi},{15:43,35:[1,44],36:[1,45]},{14:50,17:$Vj,19:$Ve,21:48,28:$Vd,42:35,43:$Vf,45:46,50:47,68:$Va,77:27},{14:52,26:$V9,46:51,47:[1,53],68:$Va,77:27},{17:[1,54]},{51:[1,55]},{14:56,51:$V9,68:$Va,77:27},{19:[1,57]},o($Vg,[2,105]),o($Vk,$V9,{77:27,14:58,68:$Va}),{14:59,30:$V9,68:$Va,77:27},o($Vl,[2,22]),o($Vk,$V9,{77:27,14:60,68:$Va}),{14:63,16:61,17:$V9,18:[1,62],68:$Va,77:27},o($Vm,$V9,{77:27,14:64,68:$Va}),o($Vm,$V9,{77:27,14:65,68:$Va}),{14:50,17:$Vj,19:$Ve,21:48,28:[1,66],42:35,43:$Vf,50:67,68:$Va,77:27},o($Vn,[2,46]),o($Vn,[2,48]),o($Vn,[2,49]),o($Vn,[2,50]),{26:[2,40]},{26:[2,41]},{14:68,19:$V9,68:$Va,77:27},o($V8,[2,15]),o($Vo,$V9,{77:27,14:69,68:$Va}),{51:[2,37]},{14:70,51:$V9,68:$Va,77:27},o($Vp,$V9,{77:27,24:71,14:72,19:$Vq,68:$Va}),{30:[1,74]},o($Vp,$V9,{77:27,14:72,24:75,19:$Vq,68:$Va}),{17:[1,76]},{14:77,19:$V9,68:$Va,77:27},{17:[2,14]},o($Vr,[2,28]),o($Vr,[2,29]),o($Vs,$V9,{77:27,14:78,68:$Va}),o($Vn,[2,47]),{19:[1,79]},{19:$Vt,31:$Vu,35:$Vv,36:$Vw,39:83,40:$Vx,41:$Vy,52:80,54:81,55:82,56:84,57:85,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:96,67:$VH,72:$VI,73:102,76:$VJ},{51:[2,38]},o($Vp,$V9,{77:27,14:105,68:$Va}),o($VK,[2,25]),o($VK,[2,26]),o($Vl,[2,21]),o($Vp,$V9,{77:27,14:106,68:$Va}),o($Vs,$V9,{77:27,14:107,68:$Va}),{19:[1,108]},o($V8,[2,39]),{14:109,26:$V9,68:$Va,77:27},o([17,28,43],$V9,{77:27,55:82,39:83,56:84,57:85,66:96,73:102,14:110,54:113,19:$Vt,31:$Vu,34:$VL,35:$Vv,36:$Vw,40:$Vx,41:$Vy,53:[1,111],58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,67:$VH,68:$Va,72:$VI,76:$VJ}),o($VM,[2,54]),o($VM,[2,57]),{55:114,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG},o($VM,[2,59]),o($VM,[2,60]),o($VN,$V9,{77:27,14:115,68:$Va}),o($VN,$V9,{77:27,14:116,68:$Va}),o($VN,$V9,{77:27,14:117,68:$Va}),o($VN,$V9,{77:27,14:118,68:$Va}),o($VN,$V9,{77:27,14:119,68:$Va}),o($VN,$V9,{77:27,14:120,68:$Va}),o($VN,$V9,{77:27,14:121,68:$Va}),o($VN,$V9,{77:27,14:122,68:$Va}),o([17,18,19,25,26,28,30,31,34,35,40,41,49,51,58,59,60,61,62,63,64,65,68,69,70,71],[2,35]),o([58,59,60,61,62,63,64,65],$VO),{19:[1,124],26:[1,123]},o([19,25,31,35,36,40,41,58,59,60,61,62,63,64,65,67,72,76],$V9,{77:27,14:125,68:$Va}),o($VN,$V9,{77:27,14:126,68:$Va}),o($VN,$V9,{77:27,14:127,68:$Va}),o($VN,$V9,{77:27,14:128,68:$Va}),o($VN,$V9,{77:27,14:129,68:$Va}),o($VM,[2,98]),o([19,26],[2,73]),o($VN,$V9,{77:27,14:130,68:$Va}),{25:[1,131],34:$VP},{25:[1,133],34:$VP},o($V8,[2,12]),{14:134,17:$V9,68:$Va,77:27},{26:[2,42]},o($Vn,[2,51]),o([17,19,28,43],$V9,{77:27,14:135,68:$Va}),o($Vo,$V9,{77:27,14:136,68:$Va}),o($VM,[2,56]),o($VM,[2,58]),o($VM,[2,61]),o($VM,[2,62]),o($VM,[2,63]),o($VM,[2,64]),o($VM,[2,65]),o($VM,[2,66]),o($VM,[2,67]),o($VM,[2,68]),{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:137,28:$VV,30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},o($VM,[2,70]),{19:$Vt,25:[1,157],31:$Vu,35:$Vv,36:$Vw,39:83,40:$Vx,41:$Vy,52:158,54:81,55:82,56:84,57:85,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:96,67:$VH,72:$VI,73:102,76:$VJ},o($VM,[2,94]),o($VM,[2,95]),o($VM,[2,96]),o($VM,[2,97]),o($VM,[2,103]),{14:159,26:$V9,68:$Va,77:27},{14:160,19:$V9,68:$Va,77:27},{14:161,26:$V9,68:$Va,77:27},{17:[2,13]},o($Vn,[2,52]),{19:$Vt,31:$Vu,35:$Vv,36:$Vw,39:83,40:$Vx,41:$Vy,54:162,55:82,56:84,57:85,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:96,67:$VH,72:$VI,73:102,76:$VJ},{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:164,28:[1,163],30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},o($V61,[2,74]),{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:165,28:$VV,30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},o($V61,[2,77]),o($V61,[2,78]),o($V61,[2,79]),o($V61,[2,80]),o($V61,[2,81]),o($V61,[2,82]),o($V61,[2,83]),o($V61,[2,84]),o($V61,[2,85]),o($V71,[2,86],{77:27,14:166,68:$Va}),o($V61,[2,87]),o($V61,[2,88]),o($V61,[2,89]),o($V61,[2,90]),o($V61,[2,91]),o($V61,[2,92]),o($V71,$VO,{77:27,14:167,68:$Va}),o($VM,[2,71]),{19:$Vt,25:[1,168],31:$Vu,34:$VL,35:$Vv,36:$Vw,39:83,40:$Vx,41:$Vy,54:113,55:82,56:84,57:85,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:96,67:$VH,72:$VI,73:102,76:$VJ},{26:[1,169]},{19:[1,170]},{26:[1,171]},o($VM,[2,55]),o($VM,[2,69]),{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:164,28:[2,93],30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:164,28:[1,172],30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},o($V61,[2,44]),o($V61,[2,43]),o($VM,[2,72]),{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:173,28:$VV,30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},o($VK,[2,27]),{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:174,28:$VV,30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},o($V61,[2,76]),{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:164,28:[1,175],30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},{17:$VQ,18:$VR,19:$VS,25:$VT,26:$VU,27:164,28:[1,176],30:$VW,31:$VX,34:$VY,35:$VZ,39:142,40:$Vx,41:$V_,48:141,49:$V$,51:$V01,58:$V11,68:$V21,69:$V31,70:$V41,71:$V51},o($V8,[2,19]),o($V8,[2,17])],
defaultActions: {51:[2,40],52:[2,41],56:[2,37],63:[2,14],70:[2,38],109:[2,42],134:[2,13]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var _ = require('lodash');

parser.parseError = function(str, hash) {
  var unexpected;

  if (hash.token === lexer.EOF) {
    unexpected = "end of input";
  } else {
    unexpected = "'" + hash.text + "'";
  }

  var str = 'Unexpected ' + unexpected + ' on line ' + (hash.line + 1);
  var error = new Error(str);
  error.lineNumber = hash.line;
  error.token = hash.token;
  error.text = hash.text;
  error.expected = hash.expected;
  error.loc = hash.loc;

  throw error;
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 68;
break;
case 1:
break;
case 2:return 79;
break;
case 3:return 80;
break;
case 4:return 'INCLUDES';
break;
case 5:return 'DASHMATCH';
break;
case 6:return 'PREFIXMATCH';
break;
case 7:return 'SUFFIXMATCH';
break;
case 8:return 'SUBSTRINGMATCH';
break;
case 9:return 53;
break;
case 10:return "FUNCTION";
break;
case 11:return 67
break;
case 12:return "EXTENDS";
break;
case 13:return "AS";
break;
case 14:return 35;
break;
case 15:return 19;
break;
case 16:return 76;
break;
case 17:return 13;
break;
case 18:return 20;
break;
case 19:return 32;
break;
case 20:return 33;
break;
case 21:return 61;
break;
case 22:return 62;
break;
case 23:return 60;
break;
case 24:return 60;
break;
case 25:return 60;
break;
case 26:return 60;
break;
case 27:return 60;
break;
case 28:return 60;
break;
case 29:return 63;
break;
case 30:return 63;
break;
case 31:return 63;
break;
case 32:return 64;
break;
case 33:return 64;
break;
case 34:return 65;
break;
case 35:return 65;
break;
case 36:return 'DIMEN';
break;
case 37:return 59;
break;
case 38:return 58;
break;
case 39:return 72;
break;
case 40:return 72;
break;
case 41:return 51;
break;
case 42:return 17;
break;
case 43:return 34;
break;
case 44:return 25;
break;
case 45:return 30;
break;
case 46:return 41;
break;
case 47:return 49;
break;
case 48:return 70;
break;
case 49:return 71;
break;
case 50:return 69;
break;
case 51:return yy_.yytext;
break;
}
},
rules: [/^(?:[ \t\r\n\f]+)/,/^(?:\/\*[^*]*\*+([^/][^*]*\*+)*\/)/,/^(?:<!--)/,/^(?:-->)/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:!([ \t\r\n\f]*)important\b)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)\()/,/^(?:\$)/,/^(?:extends\b)/,/^(?:as\b)/,/^(?:(("([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|'|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|"|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:#(([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+))/,/^(?:@import\b)/,/^(?:@var\b)/,/^(?:@func\b)/,/^(?:@macro\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))em\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ex\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))px\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))cm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))mm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))in\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pt\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pc\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))deg\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))rad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))grad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ms\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))s\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))Hz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))kHz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))%)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))/,/^(?:U\+(\?{1,6}|([0-9a-fA-F])(\?{0,5}|([0-9a-fA-F])(\?{0,4}|([0-9a-fA-F])(\?{0,3}|([0-9a-fA-F])(\?{0,2}|([0-9a-fA-F])(\??|([0-9a-fA-F]))))))))/,/^(?:U\+([0-9a-fA-F]){1,6}([0-9a-fA-F]){1,6})/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\))/,/^(?:\()/,/^(?:\+)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:([^{}\\])+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}