/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18,20,34,35],$V1=[1,6],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,18,34,35],$V6=[1,15],$V7=[1,12,18,20,34,35,70,81,82],$V8=[1,12,18,20,34,35],$V9=[2,6],$Va=[2,110],$Vb=[1,19],$Vc=[1,18,35],$Vd=[1,25],$Ve=[1,18,20,34,35,70,81,82],$Vf=[1,12,16,17,18,20,26,27,29,32,33,34,35,36,37,38,42,43,45,49,51,53,55,60,61,62,63,64,65,66,67,69,70,71,72,73,74,78,81,82],$Vg=[1,18],$Vh=[1,36],$Vi=[1,18,34,35,70,81,82],$Vj=[18,33],$Vk=[18,33,70],$Vl=[2,57],$Vm=[1,40],$Vn=[1,41],$Vo=[16,17],$Vp=[1,53],$Vq=[1,18,35,70,81,82],$Vr=[1,56],$Vs=[1,57],$Vt=[16,17,70],$Vu=[1,18,70,81,82],$Vv=[18,26,36],$Vw=[18,26,36,70],$Vx=[18,33,37,38,42,43,60,61,62,63,64,65,66,67,69,74,78],$Vy=[1,78],$Vz=[26,36],$VA=[1,86],$VB=[1,107],$VC=[1,105],$VD=[1,106],$VE=[1,108],$VF=[1,102],$VG=[1,103],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,111],$VQ=[1,109],$VR=[1,112],$VS=[16,18,29,45,70],$VT=[26,36,70],$VU=[1,121],$VV=[16,18,26,29,33,36,37,38,42,43,45,55,60,61,62,63,64,65,66,67,69,70,74,78],$VW=[16,18,26,29,33,36,37,38,42,43,45,55,60,61,62,63,64,65,66,67,69,74,78],$VX=[2,40],$VY=[1,144],$VZ=[1,162],$V_=[1,157],$V$=[1,150],$V01=[1,161],$V11=[1,149],$V21=[2,78],$V31=[1,160],$V41=[1,155],$V51=[1,164],$V61=[1,153],$V71=[1,166],$V81=[1,159],$V91=[1,163],$Va1=[1,156],$Vb1=[1,148],$Vc1=[1,154],$Vd1=[1,158],$Ve1=[1,165],$Vf1=[16,17,18,26,27,29,32,33,36,37,42,43,51,53,60,70,71,72,73],$Vg1=[16,17,18,26,27,29,32,33,36,37,42,43,51,53,60,71,72,73];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"import_list":4,"variable_map":5,"function_map":6,"macro_map":7,"rule_map":8,"import_item":9,"import":10,"space_cdata_list":11,"IMPORT_SYM":12,"wempty":13,"string_or_uri":14,"import_name":15,";":16,"AS":17,"IDENT":18,"variable_item":19,"VAR_DEFINE_SYM":20,"declaration":21,"function_item":22,"function_def":23,"function_def_name":24,"function_def_attrs":25,")":26,"{":27,"code_block":28,"}":29,"macro_item":30,"macro_def":31,"(":32,"FUNCTION":33,"FUNC_DEFINE_SYM":34,"MACRO_DEFINE_SYM":35,",":36,"STRING":37,"URI":38,"rule_item":39,"ruleset":40,"unary_operator":41,"-":42,"+":43,"property":44,"*":45,"rule_base":46,"declaration_list":47,"parent":48,"EXTENDS":49,"combinator":50,">":51,"declaration_parts":52,":":53,"expr":54,"IMPORTANT_SYM":55,"term":56,"computable_term":57,"inline_code":58,"string_term":59,"NUMBER":60,"PERCENTAGE":61,"LENGTH":62,"EMS":63,"EXS":64,"ANGLE":65,"TIME":66,"FREQ":67,"code_sym":68,"CODE":69,"S":70,"RANDOM_CONTENT":71,"<":72,"=":73,"UNICODERANGE":74,"hexcolor":75,"operator":76,"/":77,"HASH":78,"whitespace":79,"space_cdata":80,"CDO":81,"CDC":82,"$accept":0,"$end":1},
terminals_: {2:"error",12:"IMPORT_SYM",16:";",17:"AS",18:"IDENT",20:"VAR_DEFINE_SYM",26:")",27:"{",29:"}",32:"(",33:"FUNCTION",34:"FUNC_DEFINE_SYM",35:"MACRO_DEFINE_SYM",36:",",37:"STRING",38:"URI",42:"-",43:"+",45:"*",49:"EXTENDS",51:">",53:":",55:"IMPORTANT_SYM",60:"NUMBER",61:"PERCENTAGE",62:"LENGTH",63:"EMS",64:"EXS",65:"ANGLE",66:"TIME",67:"FREQ",69:"CODE",70:"S",71:"RANDOM_CONTENT",72:"<",73:"=",74:"UNICODERANGE",77:"/",78:"HASH",81:"CDO",82:"CDC"},
productions_: [0,[3,5],[4,1],[4,2],[4,0],[9,1],[9,1],[10,6],[15,4],[15,1],[5,1],[5,2],[5,0],[19,4],[19,1],[6,1],[6,2],[6,0],[22,11],[22,1],[7,1],[7,2],[7,0],[30,11],[30,1],[24,3],[24,1],[23,1],[31,1],[25,1],[25,1],[25,5],[14,2],[14,2],[8,1],[8,2],[8,0],[39,1],[39,1],[41,1],[41,1],[44,2],[44,3],[40,5],[46,3],[48,1],[48,4],[50,2],[50,2],[50,0],[47,1],[47,2],[52,1],[52,1],[52,1],[21,5],[21,6],[21,0],[54,1],[54,4],[54,2],[56,1],[56,2],[56,1],[56,1],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[58,4],[58,2],[58,4],[68,1],[28,1],[28,0],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,2],[59,2],[59,2],[59,2],[59,2],[59,1],[76,2],[76,2],[76,2],[76,0],[75,2],[79,1],[79,2],[13,1],[13,0],[11,1],[11,2],[11,0],[80,1],[80,1],[80,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = {};
      if ( $$[$0-4] )
        this.$["imports"]  = $$[$0-4];
      if ( $$[$0-3] )
        this.$["variables"]  = $$[$0-3];
      if ( $$[$0-2] )
        this.$["functions"]  = $$[$0-2];
      if ( $$[$0-1] )
        this.$["macros"]  = $$[$0-1];
      if ( $$[$0] )
        this.$["rules"]  = $$[$0];

      return this.$;
    
break;
case 2:

      this.$ = [];
      if ( $$[$0] !== null )
        this.$.push ( $$[$0] );
    
break;
case 3:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null )
        this.$.push ( $$[$0] );
    
break;
case 4: case 6: case 9: case 12: case 14: case 17: case 19: case 22: case 24: case 36: case 38: case 53: case 54: case 57: case 111: case 112: case 114: case 115: case 116:
this.$ = null;
break;
case 5: case 37: case 39: case 40: case 52: case 61: case 63: case 77: case 78: case 80: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 109:
this.$ = $$[$0];
break;
case 7:

      this.$ = {
        file: JSON.parse($$[$0-3]),
        line: yylineno,
        name: $$[$0-2]
      };
    
break;
case 8: case 13: case 32: case 33: case 47: case 48: case 97: case 102: case 103: case 104: case 106:
this.$ = $$[$0-1];
break;
case 10: case 15: case 20: case 34:

      this.$ = {};
      if ( $$[$0] !== null )
        this.$[$$[$0][0]] = $$[$0][1];
    
break;
case 11: case 16: case 21: case 35:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null )
        this.$[$$[$0][0]] = $$[$0][1];
    
break;
case 18:

    this.$ = [
      $$[$0-8],
      {
        type: "FUNC_DEF",
        attributes: $$[$0-6],
        value: $$[$0-1],
        line: $$[$0-10][1]
      }
    ];
  
break;
case 23:

    this.$ = [
      $$[$0-8],
      {
        type: "MACRO_DEF",
        attributes: $$[$0-6],
        value: $$[$0-1],
        line: $$[$0-10][1]
      }
    ];
  
break;
case 25:
this.$ = $$[$0-2];
break;
case 26:
this.$ = $$[$0].substring(0, $$[$0].length - 1);
break;
case 27: case 28:
this.$ = [$$[$0], yylineno];
break;
case 29: case 45:
this.$ = [];
break;
case 30: case 58:

    this.$ = [];
    if ( $$[$0] !== null )
      this.$.push ( $$[$0] );
  
break;
case 31:

    this.$ = $$[$0-4];
    if ( $$[$0] !== null )
      this.$.push ( $$[$0] );
  
break;
case 41:

    this.$ = $$[$0-1].replace(/[-_]([a-zA-Z])/g, function (g) { return g[1].toUpperCase(); });
  
break;
case 42:
this.$ = $$[$0-2] + $$[$0-1]      /* cwdoh; */;
break;
case 43:
this.$ = [$$[$0-4][0], { "type": "style", "selector": $$[$0-4][0], "parents": $$[$0-4][1], "declarations": $$[$0-2], "line": $$[$0-4][2] }];
break;
case 44:
this.$ = [$$[$0-2], $$[$0], yylineno];
break;
case 46:
this.$ = [$$[$0-1]];
break;
case 49: case 105: case 110:
this.$ = "";
break;
case 50:


      this.$ = {};
      if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
      }
    
break;
case 51:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
      }
    
break;
case 55:
this.$ = [ $$[$0-4], $$[$0-1][0] ];
break;
case 56:

    this.$ = [ $$[$0-5], $$[$0-2][0] ];
    $$[$0-2][0].important = true;
  
break;
case 59:

    this.$ = $$[$0-3];
    this.$.push( $$[$0] );
  
break;
case 60:

    this.$ = $$[$0-1];
    this.$.push( $$[$0] );
  
break;
case 62:

    this.$ = $$[$0]
    this.$.unary_operator = $$[$0-1]
  
break;
case 64:
this.$ = {type: "STRING", value: $$[$0], line: yylineno};
break;
case 65:
this.$ = {type: "NUMBER", value: $$[$0-1], line: yylineno};
break;
case 66:
this.$ = {type: "PERCENTAGE", value: $$[$0-1], line: yylineno};
break;
case 67:
this.$ = {type: "LENGTH", value: $$[$0-1], line: yylineno};
break;
case 68:
this.$ = {type: "EMS", value: $$[$0-1], line: yylineno};
break;
case 69:
this.$ = {type: "EXS", value: $$[$0-1], line: yylineno};
break;
case 70:
this.$ = {type: "ANGLE", value: $$[$0-1], line: yylineno};
break;
case 71:
this.$ = {type: "TIME", value: $$[$0-1], line: yylineno};
break;
case 72:
this.$ = {type: "FREQ", value: $$[$0-1], line: yylineno};
break;
case 73:
this.$ = {type: "CODE", value: $$[$0-1], line: $$[$0-3]};
break;
case 74:
this.$ = {type: "CODE", value: $$[$0], line: $$[$0-1]};
break;
case 75:
this.$ = {type: "FUNC", name: $$[$0-3].substring(0, $$[$0-3].length - 1), attributes: $$[$0-1], line: yylineno};
break;
case 76:
this.$ = yylineno;
break;
case 79:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 81: case 82:
this.$ = $$[$0] + " ";
break;
case 96:
this.$ = $$[$0-1] + $$[$0];
break;
case 98: case 99: case 100:
this.$ = '"' + $$[$0-1] + '"';;
break;
case 101:
this.$ = '"' + $$[$0] + '"';;
break;
case 107: case 108:
this.$ = ' ';
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,9:3,10:4,11:5,80:7,12:$V1,70:$V2,81:$V3,82:$V4}),{1:[3]},o($V5,[2,12],{10:4,80:7,5:11,9:12,19:13,11:14,12:$V1,20:$V6,70:$V2,81:$V3,82:$V4}),o($V7,[2,2]),o($V7,[2,5]),o($V8,$V9,{80:16,70:$V2,81:$V3,82:$V4}),o([37,38],$Va,{13:17,79:18,70:$Vb}),o($V7,[2,111]),o($V7,[2,114]),o($V7,[2,115]),o($V7,[2,116]),o($Vc,[2,17],{80:7,6:20,19:21,22:22,11:23,23:24,20:$V6,34:$Vd,70:$V2,81:$V3,82:$V4}),o($V7,[2,3]),o($Ve,[2,10]),o($V8,$V9,{80:16,70:$V2,81:$V3,82:$V4}),o([16,18,45],$Va,{79:18,13:26,70:$Vb}),o($V7,[2,112]),{14:27,37:[1,28],38:[1,29]},o([1,12,16,17,18,20,26,27,29,32,33,34,35,36,37,38,42,43,45,49,51,53,55,60,61,62,63,64,65,66,67,69,71,72,73,74,78,81,82],[2,109],{70:[1,30]}),o($Vf,[2,107]),o($Vg,[2,22],{80:7,23:24,7:31,22:32,30:33,11:34,31:35,34:$Vd,35:$Vh,70:$V2,81:$V3,82:$V4}),o($Ve,[2,11]),o($Vi,[2,15]),o($V0,[2,14],{80:16,70:$V2,81:$V3,82:$V4}),o($Vj,$Va,{79:18,13:37,70:$Vb}),o($Vk,[2,27]),{16:$Vl,18:$Vm,21:38,44:39,45:$Vn},{13:44,15:42,16:$Va,17:[1,43],70:$Vb,79:18},o($Vo,$Va,{79:18,13:45,70:$Vb}),o($Vo,$Va,{79:18,13:46,70:$Vb}),o($Vf,[2,108]),{1:[2,36],8:47,11:50,18:$Vp,30:48,31:35,35:$Vh,39:49,40:51,46:52,70:$V2,80:7,81:$V3,82:$V4},o($Vi,[2,16]),o($Vq,[2,20]),o($V5,[2,19],{80:16,70:$V2,81:$V3,82:$V4}),o($Vj,$Va,{79:18,13:54,70:$Vb}),o($Vk,[2,28]),{18:$Vr,24:55,33:$Vs},{16:[1,58]},{53:[1,59]},{13:60,53:$Va,70:$Vb,79:18},{18:[1,61]},{16:[1,62]},{13:63,18:$Va,70:$Vb,79:18},{16:[2,9]},o($Vt,[2,32]),o($Vt,[2,33]),{1:[2,1],11:65,18:$Vp,39:64,40:51,46:52,70:$V2,80:7,81:$V3,82:$V4},o($Vq,[2,21]),o($Vu,[2,34]),o($Vc,[2,24],{80:16,70:$V2,81:$V3,82:$V4}),o($Vu,[2,37]),{27:[1,66]},o([27,49],$Va,{79:18,13:67,70:$Vb}),{18:$Vr,24:68,33:$Vs},o($Vv,$Va,{79:18,13:69,70:$Vb}),{13:70,32:$Va,70:$Vb,79:18},o($Vw,[2,26]),o($Ve,[2,13]),o($Vx,$Va,{79:18,13:71,70:$Vb}),{53:[2,41]},{13:72,53:$Va,70:$Vb,79:18},o([1,12,18,20,34,35,81,82],$Va,{79:18,13:73,70:$Vb}),{18:[1,74]},o($Vu,[2,35]),o($Vg,[2,38],{80:16,70:$V2,81:$V3,82:$V4}),{13:79,16:$Vy,18:$Vm,21:77,29:$Vl,44:39,45:$Vn,47:75,52:76,70:$Vb,79:18},{13:81,27:$Va,48:80,49:[1,82],70:$Vb,79:18},o($Vv,$Va,{79:18,13:83,70:$Vb}),o($Vz,$Va,{79:18,25:84,13:85,18:$VA,70:$Vb}),{32:[1,87]},{18:$VB,33:$VC,37:$VD,38:$VE,41:91,42:$VF,43:$VG,54:88,56:89,57:90,58:92,59:93,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:104,69:$VP,74:$VQ,75:110,78:$VR},{53:[2,42]},o($V7,[2,7]),{13:113,16:$Va,70:$Vb,79:18},{13:79,16:$Vy,18:$Vm,21:77,29:[1,114],44:39,45:$Vn,52:115,70:$Vb,79:18},o($VS,[2,50]),o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),{27:[2,44]},{27:[2,45]},{13:116,18:$Va,70:$Vb,79:18},o($Vz,$Va,{79:18,13:85,25:117,18:$VA,70:$Vb}),o($Vz,$Va,{79:18,13:118,70:$Vb}),o($VT,[2,29]),o($VT,[2,30]),o($Vw,[2,25]),o([16,29,45],$Va,{79:18,57:90,41:91,58:92,59:93,68:104,75:110,13:119,56:122,18:$VB,33:$VC,36:$VU,37:$VD,38:$VE,42:$VF,43:$VG,55:[1,120],60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,69:$VP,70:$Vb,74:$VQ,78:$VR}),o($VV,[2,58]),o($VV,[2,61]),{57:123,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO},o($VV,[2,63]),o($VV,[2,64]),o($VW,$Va,{79:18,13:124,70:$Vb}),o($VW,$Va,{79:18,13:125,70:$Vb}),o($VW,$Va,{79:18,13:126,70:$Vb}),o($VW,$Va,{79:18,13:127,70:$Vb}),o($VW,$Va,{79:18,13:128,70:$Vb}),o($VW,$Va,{79:18,13:129,70:$Vb}),o($VW,$Va,{79:18,13:130,70:$Vb}),o($VW,$Va,{79:18,13:131,70:$Vb}),o([16,17,18,26,27,29,32,33,36,37,42,43,51,53,60,61,62,63,64,65,66,67,70,71,72,73],[2,39]),o([60,61,62,63,64,65,66,67],$VX),{18:[1,133],27:[1,132]},o($Vx,$Va,{79:18,13:134,70:$Vb}),o($VW,$Va,{79:18,13:135,70:$Vb}),o($VW,$Va,{79:18,13:136,70:$Vb}),o($VW,$Va,{79:18,13:137,70:$Vb}),o($VW,$Va,{79:18,13:138,70:$Vb}),o($VV,[2,101]),o([18,27],[2,76]),o($VW,$Va,{79:18,13:139,70:$Vb}),{16:[2,8]},o([1,18,81,82],$Va,{79:18,13:140,70:$Vb}),o($VS,[2,51]),{18:[1,141]},o($Vz,$Va,{79:18,13:142,70:$Vb}),{26:[1,143],36:$VY},o($VS,[2,55]),o([16,18,29,45],$Va,{79:18,13:145,70:$Vb}),o($Vx,$Va,{79:18,13:146,70:$Vb}),o($VV,[2,60]),o($VV,[2,62]),o($VV,[2,65]),o($VV,[2,66]),o($VV,[2,67]),o($VV,[2,68]),o($VV,[2,69]),o($VV,[2,70]),o($VV,[2,71]),o($VV,[2,72]),{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:147,29:$V21,32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},o($VV,[2,74]),{18:$VB,33:$VC,37:$VD,38:$VE,41:91,42:$VF,43:$VG,54:167,56:89,57:90,58:92,59:93,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:104,69:$VP,74:$VQ,75:110,78:$VR},o($VV,[2,97]),o($VV,[2,98]),o($VV,[2,99]),o($VV,[2,100]),o($VV,[2,106]),o($Vu,[2,43]),{13:168,27:$Va,70:$Vb,79:18},{26:[1,169],36:$VY},{13:170,27:$Va,70:$Vb,79:18},{13:171,18:$Va,70:$Vb,79:18},o($VS,[2,56]),{18:$VB,33:$VC,37:$VD,38:$VE,41:91,42:$VF,43:$VG,56:172,57:90,58:92,59:93,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:104,69:$VP,74:$VQ,75:110,78:$VR},{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:174,29:[1,173],32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},o($Vf1,[2,77]),{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:175,29:$V21,32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},o($Vf1,[2,80]),o($Vf1,[2,81]),o($Vf1,[2,82]),o($Vf1,[2,83]),o($Vf1,[2,84]),o($Vf1,[2,85]),o($Vf1,[2,86]),o($Vf1,[2,87]),o($Vf1,[2,88]),o($Vg1,[2,89],{79:18,13:176,70:$Vb}),o($Vf1,[2,90]),o($Vf1,[2,91]),o($Vf1,[2,92]),o($Vf1,[2,93]),o($Vf1,[2,94]),o($Vf1,[2,95]),o($Vg1,$VX,{79:18,13:177,70:$Vb}),{18:$VB,26:[1,178],33:$VC,36:$VU,37:$VD,38:$VE,41:91,42:$VF,43:$VG,56:122,57:90,58:92,59:93,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:104,69:$VP,74:$VQ,75:110,78:$VR},{27:[2,46]},{13:179,27:$Va,70:$Vb,79:18},{27:[1,180]},{18:[1,181]},o($VV,[2,59]),o($VV,[2,73]),{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:174,29:[2,96],32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:174,29:[1,182],32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},o($Vf1,[2,48]),o($Vf1,[2,47]),o($VV,[2,75]),{27:[1,183]},{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:184,29:$V21,32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},o($VT,[2,31]),o($Vf1,[2,79]),{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:185,29:$V21,32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:174,29:[1,186],32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},{16:$VZ,17:$V_,18:$V$,26:$V01,27:$V11,28:174,29:[1,187],32:$V31,33:$V41,36:$V51,37:$V61,41:152,42:$VF,43:$V71,50:151,51:$V81,53:$V91,60:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1},o($Vi,[2,18]),o($Vq,[2,23])],
defaultActions: {44:[2,9],60:[2,41],72:[2,42],80:[2,44],81:[2,45],113:[2,8],168:[2,46]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


parser.parseError = function(str, hash) {
  var unexpected;

  if (hash.token === lexer.EOF) {
    unexpected = "end of input";
  } else {
    unexpected = "'" + hash.text + "'";
  }

  var str = 'Unexpected ' + unexpected + ' on line ' + (hash.line + 1);
  var error = new Error(str);
  error.lineNumber = hash.line;
  error.token = hash.token;
  error.text = hash.text;
  error.expected = hash.expected;
  error.loc = hash.loc;

  throw error;
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 70;
break;
case 1:
break;
case 2:return 81;
break;
case 3:return 82;
break;
case 4:return 'INCLUDES';
break;
case 5:return 'DASHMATCH';
break;
case 6:return 'PREFIXMATCH';
break;
case 7:return 'SUFFIXMATCH';
break;
case 8:return 'SUBSTRINGMATCH';
break;
case 9:return 55;
break;
case 10:return "FUNCTION";
break;
case 11:return 69
break;
case 12:return "EXTENDS";
break;
case 13:return "AS";
break;
case 14:return 37;
break;
case 15:return 18;
break;
case 16:return 78;
break;
case 17:return 12;
break;
case 18:return 20;
break;
case 19:return 34;
break;
case 20:return 35;
break;
case 21:return 63;
break;
case 22:return 64;
break;
case 23:return 62;
break;
case 24:return 62;
break;
case 25:return 62;
break;
case 26:return 62;
break;
case 27:return 62;
break;
case 28:return 62;
break;
case 29:return 65;
break;
case 30:return 65;
break;
case 31:return 65;
break;
case 32:return 66;
break;
case 33:return 66;
break;
case 34:return 67;
break;
case 35:return 67;
break;
case 36:return 'DIMEN';
break;
case 37:return 61;
break;
case 38:return 60;
break;
case 39:return 74;
break;
case 40:return 74;
break;
case 41:return 53;
break;
case 42:return 16;
break;
case 43:return 36;
break;
case 44:return 26;
break;
case 45:return 32;
break;
case 46:return 43;
break;
case 47:return 51;
break;
case 48:return 72;
break;
case 49:return 73;
break;
case 50:return 71;
break;
case 51:return yy_.yytext;
break;
}
},
rules: [/^(?:[ \t\r\n\f]+)/,/^(?:\/\*[^*]*\*+([^/][^*]*\*+)*\/)/,/^(?:<!--)/,/^(?:-->)/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:!([ \t\r\n\f]*)important\b)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)\()/,/^(?:\$)/,/^(?:extends\b)/,/^(?:as\b)/,/^(?:(("([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|'|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|"|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:#(([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+))/,/^(?:@import\b)/,/^(?:@var\b)/,/^(?:@func\b)/,/^(?:@macro\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))em\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ex\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))px\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))cm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))mm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))in\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pt\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pc\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))deg\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))rad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))grad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ms\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))s\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))Hz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))kHz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_.]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))%)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))/,/^(?:U\+(\?{1,6}|([0-9a-fA-F])(\?{0,5}|([0-9a-fA-F])(\?{0,4}|([0-9a-fA-F])(\?{0,3}|([0-9a-fA-F])(\?{0,2}|([0-9a-fA-F])(\??|([0-9a-fA-F]))))))))/,/^(?:U\+([0-9a-fA-F]){1,6}([0-9a-fA-F]){1,6})/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\))/,/^(?:\()/,/^(?:\+)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:([^{}\\])+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}