/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15,16,23,29],$V1=[1,6],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,15],$V6=[1,16],$V7=[1,10,15,16,23,29,68,70,71],$V8=[1,10,15,16,23,29],$V9=[2,6],$Va=[2,87],$Vb=[1,20],$Vc=[1,28],$Vd=[1,15,16,23,29,68,70,71],$Ve=[1,10,13,15,16,17,19,20,22,23,25,26,27,29,32,33,35,39,41,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,66,68,70,71],$Vf=[1,16,68,70,71],$Vg=[2,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,50],$Vk=[13,16,22,35,68],$Vl=[16,26,27,32,33,50,51,52,53,54,55,56,57,58,59,62,66],$Vm=[1,89],$Vn=[1,88],$Vo=[1,90],$Vp=[1,84],$Vq=[1,85],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,86],$VA=[1,87],$VB=[1,91],$VC=[1,93],$VD=[1,99],$VE=[13,16,19,22,25,26,27,32,33,35,45,50,51,52,53,54,55,56,57,58,59,62,66,68],$VF=[13,16,19,22,25,26,27,32,33,35,45,50,51,52,53,54,55,56,57,58,59,62,66],$VG=[2,24],$VH=[19,25,68],$VI=[1,133],$VJ=[1,124],$VK=[1,131],$VL=[1,132],$VM=[1,123],$VN=[1,127],$VO=[1,135],$VP=[1,136],$VQ=[1,130],$VR=[1,129],$VS=[1,128],$VT=[1,134],$VU=[13,16,17,19,20,22,26,32,33,41,50,59,60,61,68],$VV=[13,16,17,19,20,22,26,32,33,41,50,59,60,61];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"import_list":4,"defines":5,"general_list":6,"import_item":7,"import":8,"space_cdata_list":9,"IMPORT_SYM":10,"wempty":11,"string_or_uri":12,";":13,"define_item":14,"FUNC_DEFINE_SYM":15,"IDENT":16,"(":17,"function_def_attrs":18,")":19,"{":20,"code_block":21,"}":22,"VAR_DEFINE_SYM":23,"declaration":24,",":25,"STRING":26,"URI":27,"general_item":28,"null":29,"ruleset":30,"unary_operator":31,"-":32,"+":33,"property":34,"*":35,"rule_base":36,"declaration_list":37,"parent":38,"EXTENDS":39,"combinator":40,">":41,"declaration_parts":42,":":43,"expr":44,"IMPORTANT_SYM":45,"term":46,"computable_term":47,"inline_code":48,"string_term":49,"NUMBER":50,"PERCENTAGE":51,"LENGTH":52,"EMS":53,"EXS":54,"ANGLE":55,"TIME":56,"FREQ":57,"CODE":58,"FUNCTION":59,"RANDOM_CONTENT":60,"=":61,"UNICODERANGE":62,"hexcolor":63,"operator":64,"/":65,"HASH":66,"whitespace":67,"S":68,"space_cdata":69,"CDO":70,"CDC":71,"$accept":0,"$end":1},
terminals_: {2:"error",10:"IMPORT_SYM",13:";",15:"FUNC_DEFINE_SYM",16:"IDENT",17:"(",19:")",20:"{",22:"}",23:"VAR_DEFINE_SYM",25:",",26:"STRING",27:"URI",29:"null",32:"-",33:"+",35:"*",39:"EXTENDS",41:">",43:":",45:"IMPORTANT_SYM",50:"NUMBER",51:"PERCENTAGE",52:"LENGTH",53:"EMS",54:"EXS",55:"ANGLE",56:"TIME",57:"FREQ",58:"CODE",59:"FUNCTION",60:"RANDOM_CONTENT",61:"=",62:"UNICODERANGE",65:"/",66:"HASH",68:"S",70:"CDO",71:"CDC"},
productions_: [0,[3,3],[4,1],[4,2],[4,0],[7,1],[7,1],[8,5],[5,1],[5,2],[5,0],[14,13],[14,4],[14,1],[18,1],[18,5],[12,2],[12,2],[6,1],[6,2],[6,1],[28,1],[28,1],[31,1],[31,1],[34,2],[34,3],[30,5],[36,3],[38,1],[38,4],[40,2],[40,2],[40,0],[37,1],[37,2],[42,1],[42,1],[42,1],[24,5],[24,6],[24,0],[44,1],[44,4],[44,2],[46,1],[46,2],[46,1],[46,1],[47,2],[47,2],[47,2],[47,2],[47,2],[47,2],[47,2],[47,2],[48,4],[48,2],[48,4],[21,1],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[49,2],[49,2],[49,2],[49,2],[49,1],[64,2],[64,2],[64,2],[64,0],[63,2],[67,1],[67,2],[11,1],[11,0],[9,1],[9,2],[9,0],[69,1],[69,1],[69,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = {};
      if ( $$[$0-2] )
        this.$["imports"]  = $$[$0-2];
      if ( $$[$0-1] )
        this.$["defines"]  = $$[$0-1];
      if ( $$[$0] )
        this.$["rulelist"]  = $$[$0];

      return this.$;
    
break;
case 2: case 18:

      this.$ = [];
      if ( $$[$0] !== null )
        this.$.push ( $$[$0] );
    
break;
case 3:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null )
        this.$.push ( $$[$0] );
    
break;
case 4: case 6: case 10: case 13: case 22: case 37: case 38: case 41: case 88: case 89: case 91: case 92: case 93:
this.$ = null;
break;
case 5: case 21: case 23: case 24: case 36: case 45: case 47: case 60: case 62: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 78: case 86:
this.$ = $$[$0];
break;
case 7:

      this.$ = {
        file: JSON.parse($$[$0-2]),
        line: yylineno
      };
    
break;
case 8:

      this.$ = {};
      if ( $$[$0] !== null )
        this.$[$$[$0][0]] = $$[$0][1];
    
break;
case 9:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null )
        this.$[$$[$0][0]] = $$[$0][1];
    
break;
case 11:

    this.$ = [
      $$[$0-10],
      {
        type: "FUNC_DEF",
        attributes: $$[$0-6],
        value: $$[$0-1],
        line: yylineno
      }
    ];
  
break;
case 12: case 16: case 17: case 31: case 32: case 74: case 75: case 76: case 77: case 79: case 80: case 81: case 83:
this.$ = $$[$0-1];
break;
case 14: case 42:

    this.$ = [];
    if ( $$[$0] !== null )
      this.$.push ( $$[$0] );
  
break;
case 15:

    this.$ = $$[$0-4];
    if ( $$[$0] !== null )
      this.$.push ( $$[$0] );
  
break;
case 19:

      this.$ = $$[$0-1];
      this.$.push( $$[$0] );
    
break;
case 25:

    this.$ = $$[$0-1].replace(/[-_]([a-zA-Z])/g, function (g) { return g[1].toUpperCase(); });
  
break;
case 26:
this.$ = $$[$0-2] + $$[$0-1]      /* cwdoh; */;
break;
case 27:
this.$ = { "type": "style", "selector": $$[$0-4][0], "parents": $$[$0-4][1], "declarations": $$[$0-2] };
break;
case 28:
this.$ = [$$[$0-2], $$[$0]];
break;
case 29:
this.$ = [];
break;
case 30:
this.$ = [$$[$0-1]];
break;
case 33: case 82: case 87:
this.$ = "";
break;
case 34:


      this.$ = {};
      if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
      }
    
break;
case 35:

      this.$ = $$[$0-1];
      if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
      }
    
break;
case 39:
this.$ = [ $$[$0-4], $$[$0-1][0] ];
break;
case 40:

    this.$ = [ $$[$0-5], $$[$0-2][0] ];
    $$[$0-2][0].important = true;
  
break;
case 43:

    this.$ = $$[$0-3];
    this.$.push( $$[$0] );
  
break;
case 44:

    this.$ = $$[$0-1];
    this.$.push( $$[$0] );
  
break;
case 46:

    this.$ = $$[$0]
    this.$.unary_operator = $$[$0-1]
  
break;
case 48:
this.$ = {type: "STRING", value: $$[$0], line: yylineno};
break;
case 49:
this.$ = {type: "NUMBER", value: $$[$0-1], line: yylineno};
break;
case 50:
this.$ = {type: "PERCENTAGE", value: $$[$0-1], line: yylineno};
break;
case 51:
this.$ = {type: "LENGTH", value: $$[$0-1], line: yylineno};
break;
case 52:
this.$ = {type: "EMS", value: $$[$0-1], line: yylineno};
break;
case 53:
this.$ = {type: "EXS", value: $$[$0-1], line: yylineno};
break;
case 54:
this.$ = {type: "ANGLE", value: $$[$0-1], line: yylineno};
break;
case 55:
this.$ = {type: "TIME", value: $$[$0-1], line: yylineno};
break;
case 56:
this.$ = {type: "FREQ", value: $$[$0-1], line: yylineno};
break;
case 57:
this.$ = {type: "CODE", value: $$[$0-1], line: yylineno};
break;
case 58:
this.$ = {type: "CODE", value: $$[$0], line: yylineno};
break;
case 59:
this.$ = {type: "FUNC", name: $$[$0-3].substring(0, $$[$0-3].length - 1), attributes: $$[$0-1], line: yylineno};
break;
case 61:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 63: case 64:
this.$ = $$[$0] + " ";
break;
case 73:
this.$ = $$[$0-1] + $$[$0];
break;
case 84: case 85:
this.$ = ' ';
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,7:3,8:4,9:5,69:7,10:$V1,68:$V2,70:$V3,71:$V4}),{1:[3]},o([1,16,29],[2,10],{8:4,69:7,5:11,7:12,14:13,9:14,10:$V1,15:$V5,23:$V6,68:$V2,70:$V3,71:$V4}),o($V7,[2,2]),o($V7,[2,5]),o($V8,$V9,{69:17,68:$V2,70:$V3,71:$V4}),o([26,27],$Va,{11:18,67:19,68:$Vb}),o($V7,[2,88]),o($V7,[2,91]),o($V7,[2,92]),o($V7,[2,93]),{1:[2,90],6:21,9:25,14:22,15:$V5,16:$Vc,23:$V6,28:23,29:[1,24],30:26,36:27,68:$V2,69:7,70:$V3,71:$V4},o($V7,[2,3]),o($Vd,[2,8]),o($V8,$V9,{69:17,68:$V2,70:$V3,71:$V4}),{11:29,16:$Va,67:19,68:$Vb},o([13,16,35],$Va,{67:19,11:30,68:$Vb}),o($V7,[2,89]),{12:31,26:[1,32],27:[1,33]},o([1,10,13,15,16,17,19,20,22,23,25,26,27,29,32,33,35,39,41,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,66,70,71],[2,86],{68:[1,34]}),o($Ve,[2,84]),{1:[2,1],9:36,16:$Vc,28:35,30:26,36:27,68:$V2,69:7,70:$V3,71:$V4},o($Vd,[2,9]),o($Vf,[2,18]),o($Vf,[2,20]),o($V0,[2,13],{69:17,68:$V2,70:$V3,71:$V4}),o($Vf,[2,21]),{20:[1,37]},o([20,39],$Va,{67:19,11:38,68:$Vb}),{16:[1,39]},{13:$Vg,16:$Vh,24:40,34:41,35:$Vi},{13:[1,44]},{11:45,13:$Va,67:19,68:$Vb},{11:46,13:$Va,67:19,68:$Vb},o($Ve,[2,85]),o($Vf,[2,19]),o($V6,[2,22],{69:17,68:$V2,70:$V3,71:$V4}),{11:51,13:$Vj,16:$Vh,22:$Vg,24:49,34:41,35:$Vi,37:47,42:48,67:19,68:$Vb},{11:53,20:$Va,38:52,39:[1,54],67:19,68:$Vb},{11:55,17:$Va,67:19,68:$Vb},{13:[1,56]},{43:[1,57]},{11:58,43:$Va,67:19,68:$Vb},{16:[1,59]},o([1,10,15,16,23,29,70,71],$Va,{67:19,11:60,68:$Vb}),{13:[2,16]},{13:[2,17]},{11:51,13:$Vj,16:$Vh,22:[1,61],24:49,34:41,35:$Vi,42:62,67:19,68:$Vb},o($Vk,[2,34]),o($Vk,[2,36]),o($Vk,[2,37]),o($Vk,[2,38]),{20:[2,28]},{20:[2,29]},{11:63,16:$Va,67:19,68:$Vb},{17:[1,64]},o($Vd,[2,12]),o($Vl,$Va,{67:19,11:65,68:$Vb}),{43:[2,25]},{11:66,43:$Va,67:19,68:$Vb},o($V7,[2,7]),o([1,16,70,71],$Va,{67:19,11:67,68:$Vb}),o($Vk,[2,35]),{16:[1,68]},{11:69,16:$Va,67:19,68:$Vb},{16:$Vm,26:$Vn,27:$Vo,31:73,32:$Vp,33:$Vq,44:70,46:71,47:72,48:74,49:75,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,62:$VB,63:92,66:$VC},{43:[2,26]},o($Vf,[2,27]),{11:94,20:$Va,67:19,68:$Vb},{16:[1,96],18:95},o([13,22,35],$Va,{67:19,47:72,31:73,48:74,49:75,63:92,11:97,46:100,16:$Vm,25:$VD,26:$Vn,27:$Vo,32:$Vp,33:$Vq,45:[1,98],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,62:$VB,66:$VC,68:$Vb}),o($VE,[2,42]),o($VE,[2,45]),{47:101,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy},o($VE,[2,47]),o($VE,[2,48]),o($VF,$Va,{67:19,11:102,68:$Vb}),o($VF,$Va,{67:19,11:103,68:$Vb}),o($VF,$Va,{67:19,11:104,68:$Vb}),o($VF,$Va,{67:19,11:105,68:$Vb}),o($VF,$Va,{67:19,11:106,68:$Vb}),o($VF,$Va,{67:19,11:107,68:$Vb}),o($VF,$Va,{67:19,11:108,68:$Vb}),o($VF,$Va,{67:19,11:109,68:$Vb}),o([13,16,17,19,20,22,26,32,33,41,50,51,52,53,54,55,56,57,59,60,61,68],[2,23]),o([50,51,52,53,54,55,56,57],$VG),{16:[1,111],20:[1,110]},o($Vl,$Va,{67:19,11:112,68:$Vb}),o($VF,$Va,{67:19,11:113,68:$Vb}),o($VF,$Va,{67:19,11:114,68:$Vb}),o($VF,$Va,{67:19,11:115,68:$Vb}),o($VF,$Va,{67:19,11:116,68:$Vb}),o($VE,[2,78]),o($VF,$Va,{67:19,11:117,68:$Vb}),{20:[2,30]},o([19,25],$Va,{67:19,11:118,68:$Vb}),o($VH,[2,14]),o($Vk,[2,39]),o([13,16,22,35],$Va,{67:19,11:119,68:$Vb}),o($Vl,$Va,{67:19,11:120,68:$Vb}),o($VE,[2,44]),o($VE,[2,46]),o($VE,[2,49]),o($VE,[2,50]),o($VE,[2,51]),o($VE,[2,52]),o($VE,[2,53]),o($VE,[2,54]),o($VE,[2,55]),o($VE,[2,56]),{11:122,13:$VI,16:$VJ,17:$VK,19:$VL,20:$VM,21:121,22:$Va,26:$VN,31:126,32:$Vp,33:$VO,40:125,41:$VP,50:$VQ,59:$VR,60:$VS,61:$VT,67:19,68:$Vb},o($VE,[2,58]),{16:$Vm,26:$Vn,27:$Vo,31:73,32:$Vp,33:$Vq,44:137,46:71,47:72,48:74,49:75,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,62:$VB,63:92,66:$VC},o($VE,[2,74]),o($VE,[2,75]),o($VE,[2,76]),o($VE,[2,77]),o($VE,[2,83]),{19:[1,138],25:[1,139]},o($Vk,[2,40]),{16:$Vm,26:$Vn,27:$Vo,31:73,32:$Vp,33:$Vq,46:140,47:72,48:74,49:75,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,62:$VB,63:92,66:$VC},{11:122,13:$VI,16:$VJ,17:$VK,19:$VL,20:$VM,21:142,22:[1,141],26:$VN,31:126,32:$Vp,33:$VO,40:125,41:$VP,50:$VQ,59:$VR,60:$VS,61:$VT,67:19,68:$Vb},o($VU,[2,60]),{11:122,13:$VI,16:$VJ,17:$VK,19:$VL,20:$VM,21:143,22:$Va,26:$VN,31:126,32:$Vp,33:$VO,40:125,41:$VP,50:$VQ,59:$VR,60:$VS,61:$VT,67:19,68:$Vb},o($VU,[2,62]),o($VU,[2,63]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,68]),o($VU,[2,69]),o($VU,[2,70]),o($VU,[2,71]),o($VU,[2,72]),o($VV,$VG,{67:19,11:144,68:$Vb}),o($VV,$Va,{67:19,11:145,68:$Vb}),{16:$Vm,19:[1,146],25:$VD,26:$Vn,27:$Vo,31:73,32:$Vp,33:$Vq,46:100,47:72,48:74,49:75,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,62:$VB,63:92,66:$VC},{11:147,20:$Va,67:19,68:$Vb},{11:148,16:$Va,67:19,68:$Vb},o($VE,[2,43]),o($VE,[2,57]),{11:122,13:$VI,16:$VJ,17:$VK,19:$VL,20:$VM,21:142,22:[2,73],26:$VN,31:126,32:$Vp,33:$VO,40:125,41:$VP,50:$VQ,59:$VR,60:$VS,61:$VT,67:19,68:$Vb},{11:122,13:$VI,16:$VJ,17:$VK,19:$VL,20:$VM,21:142,22:[1,149],26:$VN,31:126,32:$Vp,33:$VO,40:125,41:$VP,50:$VQ,59:$VR,60:$VS,61:$VT,67:19,68:$Vb},o($VU,[2,31]),o($VU,[2,32]),o($VE,[2,59]),{20:[1,150]},{16:[1,151]},o($VU,[2,61]),{11:122,13:$VI,16:$VJ,17:$VK,19:$VL,20:$VM,21:152,22:$Va,26:$VN,31:126,32:$Vp,33:$VO,40:125,41:$VP,50:$VQ,59:$VR,60:$VS,61:$VT,67:19,68:$Vb},o($VH,[2,15]),{11:122,13:$VI,16:$VJ,17:$VK,19:$VL,20:$VM,21:142,22:[1,153],26:$VN,31:126,32:$Vp,33:$VO,40:125,41:$VP,50:$VQ,59:$VR,60:$VS,61:$VT,67:19,68:$Vb},o($Vd,[2,11])],
defaultActions: {45:[2,16],46:[2,17],52:[2,28],53:[2,29],58:[2,25],66:[2,26],94:[2,30]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


parser.parseError = function(str, hash) {
  var unexpected;

  if (hash.token === lexer.EOF) {
    unexpected = "end of input";
  } else {
    unexpected = "'" + hash.text + "'";
  }

  var str = 'Unexpected ' + unexpected + ' on line ' + (hash.line + 1);
  var error = new Error(str);
  error.lineNumber = hash.line;
  error.token = hash.token;
  error.text = hash.text;
  error.expected = hash.expected;
  error.loc = hash.loc;

  throw error;
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 68;
break;
case 1:
break;
case 2:return 70;
break;
case 3:return 71;
break;
case 4:return 'INCLUDES';
break;
case 5:return 'DASHMATCH';
break;
case 6:return 'PREFIXMATCH';
break;
case 7:return 'SUFFIXMATCH';
break;
case 8:return 'SUBSTRINGMATCH';
break;
case 9:return 45;
break;
case 10:return "FUNCTION";
break;
case 11:return 58
break;
case 12:return "EXTENDS";
break;
case 13:return 26;
break;
case 14:return 16;
break;
case 15:return 10;
break;
case 16:return 23;
break;
case 17:return 15;
break;
case 18:return 53;
break;
case 19:return 54;
break;
case 20:return 52;
break;
case 21:return 52;
break;
case 22:return 52;
break;
case 23:return 52;
break;
case 24:return 52;
break;
case 25:return 52;
break;
case 26:return 55;
break;
case 27:return 55;
break;
case 28:return 55;
break;
case 29:return 56;
break;
case 30:return 56;
break;
case 31:return 57;
break;
case 32:return 57;
break;
case 33:return 'DIMEN';
break;
case 34:return 51;
break;
case 35:return 50;
break;
case 36:return 62;
break;
case 37:return 62;
break;
case 38:return 43;
break;
case 39:return 13;
break;
case 40:return 25;
break;
case 41:return 19;
break;
case 42:return 17;
break;
case 43:return 33;
break;
case 44:return 41;
break;
case 45:return '<';
break;
case 46:return 61;
break;
case 47:return 60;
break;
case 48:return yy_.yytext;
break;
}
},
rules: [/^(?:[ \t\r\n\f]+)/,/^(?:\/\*[^*]*\*+([^/][^*]*\*+)*\/)/,/^(?:<!--)/,/^(?:-->)/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:!([ \t\r\n\f]*)important\b)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)\()/,/^(?:\$)/,/^(?:extends\b)/,/^(?:(("([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|'|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|"|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:@import\b)/,/^(?:@var\b)/,/^(?:@func\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))em\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ex\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))px\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))cm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))mm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))in\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pt\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pc\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))deg\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))rad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))grad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ms\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))s\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))Hz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))kHz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))%)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))/,/^(?:U\+(\?{1,6}|([0-9a-fA-F])(\?{0,5}|([0-9a-fA-F])(\?{0,4}|([0-9a-fA-F])(\?{0,3}|([0-9a-fA-F])(\?{0,2}|([0-9a-fA-F])(\??|([0-9a-fA-F]))))))))/,/^(?:U\+([0-9a-fA-F]){1,6}([0-9a-fA-F]){1,6})/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\))/,/^(?:\()/,/^(?:\+)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:([^{}\\])+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}